#! /bin/sh
#
# This file is public domain.
#
# Author: Ids van der Molen <ids@idsvandermolen.com>
# Based on example /etc/init.d/skeleton
#
# /etc/init.d/procman
#   and its symbolic link
# /(usr/)sbin/rcprocman
#
# chkconfig: 2345 40 20
# description: (user space) process manager
#
### BEGIN INIT INFO
# Provides: procman
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: (user space) process manager
### END INIT INFO

name=procman
PROCMAN_PID=/var/run/${name}.pid
PROCMAN_BIN=/opt/${name}/bin/${name}
PROCMAN_LOG=/var/log/${name}.log
PROFILE_DIR=/var/opt/${name}
test -x $PROCMAN_BIN || { echo "$PROCMAN_BIN not installed";
        if [ "$1" = "stop" ]; then exit 0;
        else exit 5; fi; }

test -d $PROFILE_DIR || { echo "$PROFILE_DIR not found";
        if [ "$1" = "stop" ]; then exit 0;
        else exit 5; fi; }

# Source LSB init functions
# providing start_daemon, killproc, pidofproc,
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0       - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
        echo -n "Starting $name "
        ## Start daemon with startproc(8). If this fails
        ## the return value is set appropriately by startproc.
        $PROCMAN_BIN -dqv -l $PROCMAN_LOG $PROFILE_DIR $PROCMAN_PID 
        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Shutting down $name "
        ## Stop daemon with killproc(8) and if this fails
        ## killproc sets the return value according to LSB.
        $PROCMAN_BIN -t -l $PROCMAN_LOG $PROFILE_DIR $PROCMAN_PID
        # Remember status and be verbose
        rc_status -v
        ;;
    try-restart|condrestart)
        ## Do a restart only if the service was active before.
        ## Note: try-restart is now part of LSB (as of 1.9).
        ## RH has a similar command named condrestart.
        if test "$1" = "condrestart"; then
                echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
        fi
        $0 status
        if test $? = 0; then
                $0 restart
        else
                rc_reset        # Not running is not a failure.
        fi
        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    status)
        echo -n "Checking for service $name "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Return value is slightly different for the status command:
        # 0 - service up and running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running (unused)
        # 4 - service status unknown :-(
        # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

        # NOTE: checkproc returns LSB compliant status values.
        if [ -f $PROCMAN_PID ]
        then
          read pid < $PROCMAN_PID
          if [ -d /proc/$pid ]
          then
            rc_failed 0
          else
            rc_failed 1
          fi
        else
          rc_failed 3
        fi
        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|restart}"
        exit 1
        ;;
esac
rc_exit
